---
# tasks file for couchdb-installation
#
# Please copy the UUIDs and then remove UUID folder and setup_cordination_ip file from playbook home directory 
# before creating another cluster 
# 
- name: Add apache-couchdb
  yum_repository:
    name: bintray--apache-couchdb-rpm
    description: bintray--apache-couchdb-rpm
    baseurl: http://apache.bintray.com/couchdb-rpm/el$releasever/$basearch/
    gpgcheck: no

- name: Install epel-release
  yum:
    name: epel-release  
    state: present
    update_cache: yes

- name: Install couchdb
  yum:
    name: couchdb    
    state: present
    update_cache: yes

- name: Get public IP
  ipify_facts:
  register: public_ip

- name: Getting public IP
  set_fact:
    public_ip_address: "{{ public_ip['ansible_facts']['ipify_public_ip'] }}"

- debug:
    var: public_ip_address

- name: Changing IP to public IP
  lineinfile:
    path: /opt/couchdb/etc/vm.args
    regexp: '^-name couchdb@127.0.0.1'
    line: '-name couchdb@{{ public_ip_address }}'
    backrefs: yes

- name: Test for line
  shell: grep 'kernel inet_dist_listen_min 9100' /opt/couchdb/etc/vm.args
  register: test_grep
  ignore_errors: yes

- name: Adding ports
  lineinfile:
    path: /opt/couchdb/etc/vm.args
    line: "{{ item}}"
  with_items:
    - '-kernel inet_dist_listen_min 9100'
    - '-kernel inet_dist_listen_max 9200'
  when: test_grep.stdout == ""
 
- name: Make sure couchdb service is service is running and enabled
  systemd:
    state: started
    name: couchdb
    enabled: yes

- name: Checking uuid files already exists locally
  stat:
    path: "{{ UUID_dir }}/uuid_0"
  delegate_to: localhost
  register: stat_result

- name: Generating UUIDs
  shell: curl -s http://127.0.0.1:5984/_uuids?count=2
  register: uuids
  when: stat_result.stat.exists == False

- name: Setting uuid variables
  set_fact:
    uuids_parsed: "{{ uuids.stdout | from_json }}"
  when: stat_result.stat.exists == False

- name: Getting uuids
  set_fact:
    uuids_list: "{{ uuids_parsed['uuids'] }}"
  when: stat_result.stat.exists == False

- name: Creating UUID directory
  file:
    path: "{{ UUID_dir }}"
    state: directory
  delegate_to: localhost
  when: stat_result.stat.exists == False

- name: Write UUIDS to files
  copy:
    dest: "{{ UUID_dir }}/uuid_{{ item.0 }}"
    content: "{{ item.1 }}"
  with_indexed_items: "{{ uuids_list }}"
  delegate_to: localhost
  when: stat_result.stat.exists == False

- name: Creating admin password
  shell: curl -sX PUT http://127.0.0.1:5984/_node/_local/_config/admins/{{ admin_username }} -d '"{{ password }}"'

- name: Binding the clustered interface to all IP addresses availble on this machine
  shell: curl -sX PUT http://{{ admin_username}}:{{ password }}@127.0.0.1:5984/_node/_local/_config/chttpd/bind_address -d '"0.0.0.0"'

- name: Setting the UUID of the node to the first UUID you previously obtained
  shell: curl -sX PUT http://{{ admin_username}}:{{ password }}@127.0.0.1:5984/_node/_local/_config/couchdb/uuid -d '"{{ uuid_1 }}"'

- name: Setting the shared http secret for cookie creation to the second UUID
  shell: curl -sX PUT http://{{ admin_username}}:{{ password }}@127.0.0.1:5984/_node/_local/_config/couch_httpd_auth/secret -d '"{{ uuid_2 }}"'

- name: Initializing every node for cluster
  shell: curl -sX POST -H "Content-Type":" application/json" http://admin:password@{{ public_ip_address }}:5984/_cluster_setup -d '{"action":"enable_cluster", "bind_address":"0.0.0.0", "username":"admin", "password":"password", "node_count":"3"}'

- name: Checking setup_cordination_ip file is already exists locally
  stat:
    path: "{{ playbook_dir }}/setup_cordination_ip"
  delegate_to: localhost
  register: stat_result_setup_cordination_ip

- name: Creating setup_cordination_ip file
  copy:
    dest: "{{ playbook_dir }}/setup_cordination_ip"
    content: "{{ public_ip_address }}"
  delegate_to: localhost
  when: stat_result_setup_cordination_ip.stat.exists == False

- name: Joining node to cluster
  shell: curl -sX POST -H "Content-Type":" application/json" http://admin:password@{{ setup_cordination_ip }}:5984/_cluster_setup -d '{"action":"enable_cluster", "bind_address":"0.0.0.0", "port":5984, "username":"{{ admin_username }}", "password":"{{ password }}", "node_count":"3", "remote_node":"{{ public_ip_address }}", "remote_current_user":"{{ admin_username }}", "remote_current_password":"{{ password }}" }'
  when: setup_cordination_ip != public_ip_address

- name: Adding node to cluster
  shell: curl -sX POST -H "Content-Type":" application/json" http://admin:password@{{ setup_cordination_ip }}:5984/_cluster_setup -d '{"action":"add_node", "host":"{{ public_ip_address }}", "port":5984, "username":"{{ admin_username }}", "password":"{{ password }}"}'
  when: setup_cordination_ip != public_ip_address

- name: Adding system database
  shell: curl -sX POST -H "Content-Type":" application/json" http://admin:password@{{ setup_cordination_ip }}:5984/_cluster_setup -d '{"action":"finish_cluster"}'
  when: setup_cordination_ip == public_ip_address

- name: Checking cluster status
  shell: curl -s http://admin:password@{{ setup_cordination_ip }}:5984/_cluster_setup

#
# Please copy the UUIDs and then remove UUID folder and setup_cordination_ip file from playbook home directory 
# before creating another cluster 
# 